---
const birthDate = new Date("2002-05-13");
const endDate = new Date("2029-05-12");

const weeksBetweenDates = (startDate: Date, endDate: Date): number => {
	const msPerWeek = 1000 * 60 * 60 * 24 * 7;
	return Math.floor((endDate.getTime() - startDate.getTime()) / msPerWeek);
};

const totalWeeks = weeksBetweenDates(birthDate, endDate);

const formatDate = (date: Date): string => {
	const day = String(date.getDate()).padStart(2, "0");
	const month = String(date.getMonth() + 1).padStart(2, "0");
	const year = date.getFullYear();
	return `${day}/${month}/${year}`;
};
---

<div class="w-screen h-screen overflow-hidden bg-gray-800">
	<div
		id="weeks-grid"
		class="grid grid-cols-[repeat(auto-fill,_minmax(20px,_1fr))] gap-1 w-full h-full p-2"
	>
		{
			Array.from({ length: totalWeeks }, (_, i) => {
				const weekDate = new Date(
					birthDate.getTime() + i * 7 * 24 * 60 * 60 * 1000,
				);
				const formattedDate = formatDate(weekDate);

				return (
					<div
						class="week w-full h-full border border-gray-500 transition-all duration-1000"
						data-date={formattedDate}
						data-passed="false"
						title={formattedDate}
					/>
				);
			})
		}
	</div>
</div>

<script>
	const updateWeeks = (grid: HTMLElement) => {
		const currentDate = new Date();
		const totalWeeks = grid.children.length;
		let idx = 0;

		const animate = () => {
			if (idx >= totalWeeks) {
				return;
			}

			const week = grid.children[idx];

			const weekDate = new Date(
				new Date("2002-05-13").getTime() +
					idx * 7 * 24 * 60 * 60 * 1000,
			);

			if (weekDate <= currentDate) {
				week.classList.add("bg-gray-500");
				week.setAttribute("data-passed", "true");
			}

			idx++;
			requestAnimationFrame(animate);
		};
		requestAnimationFrame(animate);
	};

	const weeksGrid = document.getElementById("weeks-grid");
	if (weeksGrid) {
		updateWeeks(weeksGrid);
	}
</script>
